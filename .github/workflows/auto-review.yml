name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  auto-review:
    name: Automated Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run automated review checks
        id: review-checks
        run: |
          echo "## 🔍 Automated Review Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check PR size
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | wc -l)
          CHANGED_LINES=$(git diff --numstat HEAD~1 HEAD | awk '{sum += $1 + $2} END {print sum}')

          echo "### 📊 PR Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Files changed**: $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines changed**: $CHANGED_LINES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for common issues
          echo "### 🔍 Automated Checks" >> $GITHUB_STEP_SUMMARY

          # Check for console.log statements
          CONSOLE_LOGS=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "console\.log" 2>/dev/null || true)
          if [ -n "$CONSOLE_LOGS" ]; then
            echo "❌ **Console.log statements found in**: $CONSOLE_LOGS" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No console.log statements found**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for TODO comments
          TODO_COMMENTS=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "TODO\|FIXME\|HACK" 2>/dev/null || true)
          if [ -n "$TODO_COMMENTS" ]; then
            echo "⚠️ **TODO/FIXME comments found in**: $TODO_COMMENTS" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No TODO/FIXME comments found**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for hardcoded values
          HARDCODED_VALUES=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "localhost\|127\.0\.0\.1\|password\|secret" 2>/dev/null || true)
          if [ -n "$HARDCODED_VALUES" ]; then
            echo "⚠️ **Potential hardcoded values found in**: $HARDCODED_VALUES" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No hardcoded values found**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for unused imports
          echo "### 📦 Import Analysis" >> $GITHUB_STEP_SUMMARY
          UNUSED_IMPORTS=$(npx eslint --no-eslintrc --config .eslintrc.json --rule 'no-unused-vars: error' --format compact . 2>/dev/null | grep "no-unused-vars" || true)
          if [ -n "$UNUSED_IMPORTS" ]; then
            echo "⚠️ **Unused imports/variables detected**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$UNUSED_IMPORTS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No unused imports detected**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for TypeScript errors
          echo "### 🔧 TypeScript Analysis" >> $GITHUB_STEP_SUMMARY
          TS_ERRORS=$(npx tsc --noEmit 2>&1 || true)
          if [ -n "$TS_ERRORS" ]; then
            echo "❌ **TypeScript errors detected**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$TS_ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No TypeScript errors**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for security issues
          echo "### 🔒 Security Analysis" >> $GITHUB_STEP_SUMMARY
          SECURITY_ISSUES=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "eval\|innerHTML\|dangerouslySetInnerHTML" 2>/dev/null || true)
          if [ -n "$SECURITY_ISSUES" ]; then
            echo "⚠️ **Potential security issues found in**: $SECURITY_ISSUES" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No obvious security issues detected**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for project-specific rules
          echo "### 🎯 Project-Specific Rules" >> $GITHUB_STEP_SUMMARY

          # Check GitHub integration usage
          GITHUB_IMPORT=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "@/lib/integrations/github[^-]" 2>/dev/null || true)
          if [ -n "$GITHUB_IMPORT" ]; then
            echo "❌ **Non-cached GitHub import found in**: $GITHUB_IMPORT" >> $GITHUB_STEP_SUMMARY
            echo "Please use \`@/lib/integrations/github-cached\` instead" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **GitHub integration follows caching rules**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check image optimization usage
          IMG_TAGS=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "<img" 2>/dev/null || true)
          if [ -n "$IMG_TAGS" ]; then
            echo "⚠️ **Standard img tags found in**: $IMG_TAGS" >> $GITHUB_STEP_SUMMARY
            echo "Consider using \`OptimizedImage\` component instead" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Image optimization rules followed**" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for proper error handling
          echo "### 🛡️ Error Handling" >> $GITHUB_STEP_SUMMARY
          TRY_CATCH=$(git diff HEAD~1 HEAD --name-only | xargs grep -l "try.*catch\|\.catch(" 2>/dev/null || true)
          if [ -n "$TRY_CATCH" ]; then
            echo "✅ **Error handling patterns detected**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Consider adding error handling for API calls**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Review Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Code follows project style guidelines" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All tests pass" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Error handling is implemented" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] TypeScript types are correct" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Security considerations addressed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Performance impact considered" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Documentation updated if needed" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');

            // Create comment body
            const commentBody = summary + '\n\n---\n\n🤖 **Automated Review** - This comment will be updated as the PR changes.';

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🤖 **Automated Review**')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  auto-assign:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Auto assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const reviewers = new Set();
            const teamReviewers = new Set();

            // Define file-based reviewer assignments
            const fileReviewers = {
              'src/lib/integrations/': ['@backend-team'],
              'src/components/': ['@frontend-team'],
              'src/app/api/': ['@backend-team'],
              'prisma/': ['@backend-team'],
              'docs/': ['@documentation-team'],
              '.github/': ['@devops-team'],
            };

            // Assign reviewers based on changed files
            for (const file of files) {
              for (const [path, teams] of Object.entries(fileReviewers)) {
                if (file.filename.startsWith(path)) {
                  teams.forEach(team => teamReviewers.add(team));
                }
              }
            }

            // Always assign core team for critical files
            if (files.some(f => f.filename.includes('auth') || f.filename.includes('security'))) {
              teamReviewers.add('@security-team');
            }

            // Assign reviewers if any were found
            if (teamReviewers.size > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                team_reviewers: Array.from(teamReviewers)
              });
              
              console.log(`Assigned reviewers: ${Array.from(teamReviewers).join(', ')}`);
            }

  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Auto label PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = new Set();

            // Determine labels based on changed files
            if (files.some(f => f.filename.startsWith('src/components/'))) {
              labels.add('frontend');
            }
            if (files.some(f => f.filename.startsWith('src/app/api/'))) {
              labels.add('backend');
            }
            if (files.some(f => f.filename.startsWith('src/lib/integrations/'))) {
              labels.add('integrations');
            }
            if (files.some(f => f.filename.startsWith('prisma/'))) {
              labels.add('database');
            }
            if (files.some(f => f.filename.startsWith('docs/'))) {
              labels.add('documentation');
            }
            if (files.some(f => f.filename.startsWith('.github/'))) {
              labels.add('devops');
            }

            // Determine size label
            const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
            if (totalChanges > 500) {
              labels.add('large-pr');
            } else if (totalChanges > 100) {
              labels.add('medium-pr');
            } else {
              labels.add('small-pr');
            }

            // Determine type label
            if (pr.title.toLowerCase().includes('fix') || pr.title.toLowerCase().includes('bug')) {
              labels.add('bug-fix');
            } else if (pr.title.toLowerCase().includes('feat') || pr.title.toLowerCase().includes('feature')) {
              labels.add('feature');
            } else if (pr.title.toLowerCase().includes('refactor')) {
              labels.add('refactor');
            } else if (pr.title.toLowerCase().includes('docs')) {
              labels.add('documentation');
            }

            // Add labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
              
              console.log(`Added labels: ${Array.from(labels).join(', ')}`);
            }

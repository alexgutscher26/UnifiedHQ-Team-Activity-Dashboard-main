name: Slack Notifications
permissions:
  contents: read

on:
  workflow_run:
    workflows:
      [
        'CI Pipeline',
        'Deploy to Production',
        'Deploy to Staging',
        'Security Scanning',
        'Performance Testing',
        'Release Management',
        'Dependency Updates',
      ]
    types: [completed]
  workflow_dispatch:
    inputs:
      message:
        description: 'Custom notification message'
        required: true
        type: string
      channel:
        description: 'Slack channel (without #)'
        required: false
        default: 'dev-notifications'
        type: string
      severity:
        description: 'Notification severity'
        required: false
        default: 'info'
        type: choice
        options:
          - info
          - warning
          - error
          - success

concurrency:
  group: slack-notifications-${{ github.ref }}
  cancel-in-progress: false

jobs:
  determine-notification-context:
    name: Determine Notification Context
    runs-on: ubuntu-latest
    outputs:
      workflow-name: ${{ steps.context.outputs.workflow-name }}
      workflow-status: ${{ steps.context.outputs.workflow-status }}
      workflow-conclusion: ${{ steps.context.outputs.workflow-conclusion }}
      notification-channel: ${{ steps.context.outputs.notification-channel }}
      notification-color: ${{ steps.context.outputs.notification-color }}
      notification-emoji: ${{ steps.context.outputs.notification-emoji }}
      notification-priority: ${{ steps.context.outputs.notification-priority }}
      should-notify: ${{ steps.context.outputs.should-notify }}
      custom-message: ${{ steps.context.outputs.custom-message }}
    steps:
      - name: Determine notification context
        id: context
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual notification
            echo "workflow-name=Manual Notification" >> $GITHUB_OUTPUT
            echo "workflow-status=manual" >> $GITHUB_OUTPUT
            echo "workflow-conclusion=neutral" >> $GITHUB_OUTPUT
            echo "notification-channel=${{ github.event.inputs.channel }}" >> $GITHUB_OUTPUT
            echo "custom-message=${{ github.event.inputs.message }}" >> $GITHUB_OUTPUT
            echo "should-notify=true" >> $GITHUB_OUTPUT
            
            case "${{ github.event.inputs.severity }}" in
              "error")
                echo "notification-color=danger" >> $GITHUB_OUTPUT
                echo "notification-emoji=🚨" >> $GITHUB_OUTPUT
                echo "notification-priority=high" >> $GITHUB_OUTPUT
                ;;
              "warning")
                echo "notification-color=warning" >> $GITHUB_OUTPUT
                echo "notification-emoji=⚠️" >> $GITHUB_OUTPUT
                echo "notification-priority=medium" >> $GITHUB_OUTPUT
                ;;
              "success")
                echo "notification-color=good" >> $GITHUB_OUTPUT
                echo "notification-emoji=✅" >> $GITHUB_OUTPUT
                echo "notification-priority=low" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "notification-color=#36a64f" >> $GITHUB_OUTPUT
                echo "notification-emoji=ℹ️" >> $GITHUB_OUTPUT
                echo "notification-priority=low" >> $GITHUB_OUTPUT
                ;;
            esac
          else
            # Workflow run notification
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            WORKFLOW_STATUS="${{ github.event.workflow_run.status }}"
            WORKFLOW_CONCLUSION="${{ github.event.workflow_run.conclusion }}"
            
            echo "workflow-name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
            echo "workflow-status=$WORKFLOW_STATUS" >> $GITHUB_OUTPUT
            echo "workflow-conclusion=$WORKFLOW_CONCLUSION" >> $GITHUB_OUTPUT
            echo "custom-message=" >> $GITHUB_OUTPUT
            
            # Determine notification settings based on workflow and outcome
            case "$WORKFLOW_NAME" in
              "CI Pipeline")
                if [[ "$WORKFLOW_CONCLUSION" == "failure" ]]; then
                  echo "notification-channel=dev-alerts" >> $GITHUB_OUTPUT
                  echo "notification-color=danger" >> $GITHUB_OUTPUT
                  echo "notification-emoji=❌" >> $GITHUB_OUTPUT
                  echo "notification-priority=high" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                # Assign head_branch to shell variable to prevent code injection
                HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"
                elif [[ "$WORKFLOW_CONCLUSION" == "success" && "$HEAD_BRANCH" == "main" ]]; then
                  echo "notification-channel=dev-notifications" >> $GITHUB_OUTPUT
                  echo "notification-color=good" >> $GITHUB_OUTPUT
                  echo "notification-emoji=✅" >> $GITHUB_OUTPUT
                  echo "notification-priority=low" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                else
                  echo "should-notify=false" >> $GITHUB_OUTPUT
                fi
                ;;
              "Deploy to Production")
                echo "notification-channel=deployments" >> $GITHUB_OUTPUT
                echo "notification-priority=high" >> $GITHUB_OUTPUT
                echo "should-notify=true" >> $GITHUB_OUTPUT
                if [[ "$WORKFLOW_CONCLUSION" == "success" ]]; then
                  echo "notification-color=good" >> $GITHUB_OUTPUT
                  echo "notification-emoji=🚀" >> $GITHUB_OUTPUT
                else
                  echo "notification-color=danger" >> $GITHUB_OUTPUT
                  echo "notification-emoji=🚨" >> $GITHUB_OUTPUT
                fi
                ;;
              "Deploy to Staging")
                echo "notification-channel=dev-notifications" >> $GITHUB_OUTPUT
                echo "notification-priority=medium" >> $GITHUB_OUTPUT
                if [[ "$WORKFLOW_CONCLUSION" == "success" ]]; then
                  echo "notification-color=good" >> $GITHUB_OUTPUT
                  echo "notification-emoji=🎯" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                else
                  echo "notification-color=warning" >> $GITHUB_OUTPUT
                  echo "notification-emoji=⚠️" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                fi
                ;;
              "Security Scanning")
                if [[ "$WORKFLOW_CONCLUSION" == "failure" ]]; then
                  echo "notification-channel=security-alerts" >> $GITHUB_OUTPUT
                  echo "notification-color=danger" >> $GITHUB_OUTPUT
                  echo "notification-emoji=🔒" >> $GITHUB_OUTPUT
                  echo "notification-priority=high" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                else
                  echo "should-notify=false" >> $GITHUB_OUTPUT
                fi
                ;;
              "Performance Testing")
                if [[ "$WORKFLOW_CONCLUSION" == "failure" ]]; then
                  echo "notification-channel=dev-alerts" >> $GITHUB_OUTPUT
                  echo "notification-color=warning" >> $GITHUB_OUTPUT
                  echo "notification-emoji=📊" >> $GITHUB_OUTPUT
                  echo "notification-priority=medium" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                else
                  echo "should-notify=false" >> $GITHUB_OUTPUT
                fi
                ;;
              "Release Management")
                echo "notification-channel=releases" >> $GITHUB_OUTPUT
                echo "notification-priority=high" >> $GITHUB_OUTPUT
                echo "should-notify=true" >> $GITHUB_OUTPUT
                if [[ "$WORKFLOW_CONCLUSION" == "success" ]]; then
                  echo "notification-color=good" >> $GITHUB_OUTPUT
                  echo "notification-emoji=🎉" >> $GITHUB_OUTPUT
                else
                  echo "notification-color=danger" >> $GITHUB_OUTPUT
                  echo "notification-emoji=💥" >> $GITHUB_OUTPUT
                fi
                ;;
              "Dependency Updates")
                if [[ "$WORKFLOW_CONCLUSION" == "failure" ]]; then
                  echo "notification-channel=dev-notifications" >> $GITHUB_OUTPUT
                  echo "notification-color=warning" >> $GITHUB_OUTPUT
                  echo "notification-emoji=📦" >> $GITHUB_OUTPUT
                  echo "notification-priority=low" >> $GITHUB_OUTPUT
                  echo "should-notify=true" >> $GITHUB_OUTPUT
                else
                  echo "should-notify=false" >> $GITHUB_OUTPUT
                fi
                ;;
              *)
                echo "should-notify=false" >> $GITHUB_OUTPUT
                ;;
            esac
          fi

  send-slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: determine-notification-context
    if: needs.determine-notification-context.outputs.should-notify == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Prepare notification payload
        id: payload
        run: |
          WORKFLOW_NAME="${{ needs.determine-notification-context.outputs.workflow-name }}"
          WORKFLOW_STATUS="${{ needs.determine-notification-context.outputs.workflow-status }}"
          WORKFLOW_CONCLUSION="${{ needs.determine-notification-context.outputs.workflow-conclusion }}"
          CUSTOM_MESSAGE="${{ needs.determine-notification-context.outputs.custom-message }}"
          EMOJI="${{ needs.determine-notification-context.outputs.notification-emoji }}"

          # Build notification title and message
          if [[ -n "$CUSTOM_MESSAGE" ]]; then
            TITLE="$EMOJI Manual Notification"
            MESSAGE="$CUSTOM_MESSAGE"
          else
            case "$WORKFLOW_CONCLUSION" in
              "success")
                TITLE="$EMOJI $WORKFLOW_NAME Completed Successfully"
                ;;
              "failure")
                TITLE="$EMOJI $WORKFLOW_NAME Failed"
                ;;
              "cancelled")
                TITLE="$EMOJI $WORKFLOW_NAME Cancelled"
                ;;
              *)
                TITLE="$EMOJI $WORKFLOW_NAME Status: $WORKFLOW_CONCLUSION"
                ;;
            esac
            
            MESSAGE="Workflow: $WORKFLOW_NAME\nStatus: $WORKFLOW_CONCLUSION\nBranch: ${{ github.event.workflow_run.head_branch || github.ref_name }}\nCommit: ${{ github.event.workflow_run.head_sha || github.sha }}"
          fi

          # Add repository and actor information
          REPO_INFO="Repository: ${{ github.repository }}\nTriggered by: ${{ github.event.workflow_run.actor.login || github.actor }}"

          # Add workflow run URL
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}"
            REPO_INFO="$REPO_INFO\nWorkflow Run: <$WORKFLOW_URL|View Details>"
          fi

          # Combine message parts
          FULL_MESSAGE="$MESSAGE\n\n$REPO_INFO"

          # Escape special characters for JSON
          TITLE_ESCAPED=$(echo "$TITLE" | sed 's/"/\\"/g' | sed "s/'/\\'/g")
          MESSAGE_ESCAPED=$(echo "$FULL_MESSAGE" | sed 's/"/\\"/g' | sed "s/'/\\'/g")

          echo "title=$TITLE_ESCAPED" >> $GITHUB_OUTPUT
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#${{ needs.determine-notification-context.outputs.notification-channel }}",
              "attachments": [
                {
                  "color": "${{ needs.determine-notification-context.outputs.notification-color }}",
                  "title": "${{ steps.payload.outputs.title }}",
                  "text": "${{ steps.payload.outputs.message }}",
                  "footer": "UnifiedHQ GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": ${{ github.event.workflow_run.updated_at && 'github.event.workflow_run.updated_at' || 'github.event.head_commit.timestamp' || 'null' }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send high priority alert
        if: needs.determine-notification-context.outputs.notification-priority == 'high'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#alerts",
              "text": "🚨 HIGH PRIORITY ALERT 🚨",
              "attachments": [
                {
                  "color": "danger",
                  "title": "${{ steps.payload.outputs.title }}",
                  "text": "${{ steps.payload.outputs.message }}",
                  "footer": "UnifiedHQ Critical Alert System",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  send-deployment-notification:
    name: Send Deployment Notification
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: determine-notification-context
    if: |
      needs.determine-notification-context.outputs.should-notify == 'true' && 
      (contains(needs.determine-notification-context.outputs.workflow-name, 'Deploy') || 
       contains(needs.determine-notification-context.outputs.workflow-name, 'Release'))
    steps:
      - name: Get deployment details
        id: deployment
        run: |
          WORKFLOW_NAME="${{ needs.determine-notification-context.outputs.workflow-name }}"
          WORKFLOW_CONCLUSION="${{ needs.determine-notification-context.outputs.workflow-conclusion }}"

          # Determine environment
          if [[ "$WORKFLOW_NAME" == *"Production"* ]]; then
            ENVIRONMENT="Production"
            ENV_URL="https://app.unifiedhq.com"
          elif [[ "$WORKFLOW_NAME" == *"Staging"* ]]; then
            ENVIRONMENT="Staging"
            ENV_URL="https://staging.unifiedhq.com"
          else
            ENVIRONMENT="Unknown"
            ENV_URL=""
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "env-url=$ENV_URL" >> $GITHUB_OUTPUT

          # Get commit information
          if [[ "${{ github.event.workflow_run.head_sha }}" ]]; then
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            COMMIT_URL="https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
            COMMIT_SHORT=$(echo "$COMMIT_SHA" | cut -c1-7)
            echo "commit-info=<$COMMIT_URL|$COMMIT_SHORT>" >> $GITHUB_OUTPUT
          else
            echo "commit-info=N/A" >> $GITHUB_OUTPUT
          fi

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#deployments",
              "attachments": [
                {
                  "color": "${{ needs.determine-notification-context.outputs.notification-color }}",
                  "title": "${{ needs.determine-notification-context.outputs.notification-emoji }} ${{ steps.deployment.outputs.environment }} Deployment ${{ needs.determine-notification-context.outputs.workflow-conclusion == 'success' && 'Successful' || 'Failed' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ steps.deployment.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ needs.determine-notification-context.outputs.workflow-conclusion }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "$HEAD_BRANCH",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ steps.deployment.outputs.commit-info }}",
                      "short": true
                    }
                    ${{ steps.deployment.outputs.env-url && format(',{"title": "URL", "value": "<%s|Open Application>", "short": false}', steps.deployment.outputs.env-url) || '' }}
                  ],
                  "footer": "UnifiedHQ Deployment System",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": ${{ github.event.workflow_run.updated_at || 'null' }}
                }
              ]
            }
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch || github.ref_name }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  send-security-alert:
    name: Send Security Alert
    permissions:
      issues: write
      contents: read
    runs-on: ubuntu-latest
    needs: determine-notification-context
    if: |
      needs.determine-notification-context.outputs.should-notify == 'true' && 
      contains(needs.determine-notification-context.outputs.workflow-name, 'Security')
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#security-alerts",
              "text": "🔒 SECURITY ALERT 🔒",
              "attachments": [
                {
                  "color": "danger",
                  "title": "Security Scanning Failed",
                  "text": "Security vulnerabilities or issues have been detected in the codebase.",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "$HEAD_BRANCH",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}|View Security Scan Results>",
                      "short": false
                    }
                  ],
                  "footer": "UnifiedHQ Security System",
                  "footer_icon": "🔒"
                }
              ]
            }
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch || github.ref_name }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create security incident issue
        uses: actions/github-script@v7
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch || github.ref_name }}
        with:
          script: |
            const title = `🔒 Security Alert - ${{ github.event.workflow_run.name }} Failed`;
            const body = `## Security Alert

            **Workflow:** ${{ github.event.workflow_run.name }}
            **Status:** ${{ needs.determine-notification-context.outputs.workflow-conclusion }}
            **Branch:** ${process.env.HEAD_BRANCH}
            **Commit:** ${{ github.event.workflow_run.head_sha || github.sha }}
            **Workflow Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}

            ### Action Required

            Security scanning has detected vulnerabilities or security issues that require immediate attention:

            1. Review the workflow logs for detailed findings
            2. Address any critical or high-severity vulnerabilities
            3. Update dependencies if vulnerability scanning failed
            4. Remove any exposed secrets if secret scanning failed
            5. Fix code security issues if SAST scanning failed

            ### Next Steps

            - [ ] Investigate security findings
            - [ ] Apply necessary fixes
            - [ ] Re-run security scans to verify fixes
            - [ ] Update security documentation if needed

            **Priority:** High
            **Assignee:** Security team lead
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent', 'automated']
            });

  notification-summary:
    name: Notification Summary
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      [
        determine-notification-context,
        send-slack-notification,
        send-deployment-notification,
        send-security-alert,
      ]
    if: always()
    steps:
      - name: Log notification results
        run: |
          echo "=== Notification Summary ==="
          echo "Workflow: ${{ needs.determine-notification-context.outputs.workflow-name }}"
          echo "Should notify: ${{ needs.determine-notification-context.outputs.should-notify }}"
          echo "Channel: ${{ needs.determine-notification-context.outputs.notification-channel }}"
          echo "Priority: ${{ needs.determine-notification-context.outputs.notification-priority }}"
          echo "Status: ${{ needs.determine-notification-context.outputs.workflow-conclusion }}"

          if [[ "${{ needs.send-slack-notification.result }}" == "success" ]]; then
            echo "✅ Slack notification sent successfully"
          elif [[ "${{ needs.send-slack-notification.result }}" == "skipped" ]]; then
            echo "⏭️ Slack notification skipped"
          else
            echo "❌ Slack notification failed"
          fi

          if [[ "${{ needs.send-deployment-notification.result }}" == "success" ]]; then
            echo "✅ Deployment notification sent successfully"
          elif [[ "${{ needs.send-deployment-notification.result }}" == "skipped" ]]; then
            echo "⏭️ Deployment notification skipped"
          else
            echo "❌ Deployment notification failed"
          fi

          if [[ "${{ needs.send-security-alert.result }}" == "success" ]]; then
            echo "✅ Security alert sent successfully"
          elif [[ "${{ needs.send-security-alert.result }}" == "skipped" ]]; then
            echo "⏭️ Security alert skipped"
          else
            echo "❌ Security alert failed"
          fi

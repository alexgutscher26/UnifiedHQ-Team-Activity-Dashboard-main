name: Deploy to Staging
permissions:
  contents: write
  statuses: write
  actions: write

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: staging-deployment
  cancel-in-progress: true

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check for deployment changes
        id: changes
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Force deployment requested"
            exit 0
          fi

          # Check if there are changes that require deployment
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)

          # Skip deployment if only documentation or non-code files changed
          if echo "$CHANGED_FILES" | grep -qvE '\.(md|txt|yml|yaml)$|^\.github/|^docs/|^scripts/'; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Code changes detected, deployment needed"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "Only documentation changes detected, skipping deployment"
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-staging-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-staging-${{ hashFiles('**/bun.lockb') }}-

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env
          echo "REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" >> .env
          echo "BETTER_AUTH_SECRET=${{ secrets.STAGING_BETTER_AUTH_SECRET }}" >> .env
          echo "BETTER_AUTH_URL=${{ secrets.STAGING_BETTER_AUTH_URL }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.STAGING_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.STAGING_GITHUB_CLIENT_SECRET }}" >> .env
          echo "SLACK_CLIENT_ID=${{ secrets.STAGING_SLACK_CLIENT_ID }}" >> .env
          echo "SLACK_CLIENT_SECRET=${{ secrets.STAGING_SLACK_CLIENT_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.STAGING_OPENAI_API_KEY }}" >> .env
          echo "SENTRY_DSN=${{ secrets.STAGING_SENTRY_DSN }}" >> .env
          echo "VERCEL_ENV=preview" >> .env

      - name: Generate Prisma client
        run: bunx prisma generate

      - name: Build application
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: staging-build-artifacts
          path: |
            .next/
            !.next/cache
            prisma/
            public/
            package.json
            bun.lockb
          retention-days: 1

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: staging-build-artifacts

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Run database migrations
        run: |
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" > .env
          bunx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Run health checks
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Check if the application is responding
          HEALTH_URL="${{ steps.deploy.outputs.preview-url }}/api/health"

          for i in {1..10}; do
            if curl -f "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i failed, retrying in 10s..."
              sleep 10
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Health check failed after 10 attempts"
              exit 1
            fi
          done

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}';

            if (status === 'success') {
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                target_url: deploymentUrl,
                description: 'Staging deployment successful',
                context: 'deployment/staging'
              });
            } else {
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'failure',
                description: 'Staging deployment failed',
                context: 'deployment/staging'
              });
            }

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [changes, deploy]
    if: always() && needs.changes.outputs.should-deploy == 'true'
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployStatus = '${{ needs.deploy.result }}';
            const deploymentUrl = '${{ needs.deploy.outputs.preview-url }}' || 'N/A';
            const commitSha = context.sha.substring(0, 7);
            const commitMessage = context.payload.head_commit?.message || 'No commit message';

            let emoji, status, color;
            if (deployStatus === 'success') {
              emoji = 'üöÄ';
              status = 'SUCCESS';
              color = '36a64f';
            } else {
              emoji = '‚ùå';
              status = 'FAILED';
              color = 'ff0000';
            }

            const message = `${emoji} **Staging Deployment ${status}**

            **Commit:** \`${commitSha}\` - ${commitMessage}
            **Branch:** \`${context.ref.replace('refs/heads/', '')}\`
            **Deployment URL:** ${deploymentUrl}
            **Workflow:** [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Create a comment on the commit
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Delete build artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'staging-build-artifacts') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }

name: Publish Release Artifacts

on:
  release:
    types: [published]
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      registry:
        required: false
        type: string
        default: 'all'

env:
  NODE_VERSION: '20.x'
  BUN_VERSION: 'latest'

jobs:
  # Job 1: Publish to Multiple Registries
  publish-to-registries:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        registry:
          - name: 'github-packages'
            url: 'https://npm.pkg.github.com'
          - name: 'github-container-registry'
            url: 'ghcr.io'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Download release artifacts
        if: github.event_name == 'release'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Download artifacts from the release
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -o "unifiedhq-${VERSION}-production.tar.gz" \
            "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/unifiedhq-${VERSION}-production.tar.gz"

          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -o "unifiedhq-${VERSION}-source.tar.gz" \
            "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/unifiedhq-${VERSION}-source.tar.gz"

      - name: Publish to GitHub Packages
        if: matrix.registry.name == 'github-packages'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Create package for GitHub Packages
          mkdir -p npm-package
          cd npm-package

          # Create package.json for npm registry
          cat > package.json << EOF
          {
            "name": "@${{ github.repository_owner }}/unifiedhq",
            "version": "${VERSION}",
            "description": "UnifiedHQ team activity dashboard - Production artifacts",
            "main": "index.js",
            "files": [
              "artifacts/**/*",
              "README.md",
              "LICENSE"
            ],
            "repository": {
              "type": "git",
              "url": "git+https://github.com/${{ github.repository }}.git"
            },
            "keywords": [
              "dashboard",
              "team-activity",
              "github",
              "slack",
              "nextjs"
            ],
            "author": "${{ github.repository_owner }}",
            "license": "MIT",
            "publishConfig": {
              "registry": "${{ matrix.registry.url }}"
            },
            "engines": {
              "node": ">=18.0.0",
              "bun": ">=1.0.0"
            }
          }
          EOF

          # Create README for the package
          cat > README.md << EOF
          # UnifiedHQ v${VERSION}

          This package contains the production artifacts for UnifiedHQ v${VERSION}.

          ## Installation

          \`\`\`bash
          npm install @${{ github.repository_owner }}/unifiedhq@${VERSION}
          \`\`\`

          ## Usage

          Extract the production artifacts:

          \`\`\`bash
          tar -xzf node_modules/@${{ github.repository_owner }}/unifiedhq/artifacts/unifiedhq-${VERSION}-production.tar.gz
          \`\`\`

          ## Links

          - [GitHub Repository](https://github.com/${{ github.repository }})
          - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${VERSION})
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          EOF

          # Copy artifacts
          mkdir -p artifacts
          if [ -f "../unifiedhq-${VERSION}-production.tar.gz" ]; then
            cp "../unifiedhq-${VERSION}-production.tar.gz" artifacts/
          fi
          if [ -f "../unifiedhq-${VERSION}-source.tar.gz" ]; then
            cp "../unifiedhq-${VERSION}-source.tar.gz" artifacts/
          fi

          # Create index.js
          cat > index.js << EOF
          const path = require('path');
          const fs = require('fs');

          module.exports = {
            version: '${VERSION}',
            artifacts: {
              production: path.join(__dirname, 'artifacts', 'unifiedhq-${VERSION}-production.tar.gz'),
              source: path.join(__dirname, 'artifacts', 'unifiedhq-${VERSION}-source.tar.gz')
            },
            extract: function(artifactType, targetDir) {
              const artifact = this.artifacts[artifactType];
              if (!artifact || !fs.existsSync(artifact)) {
                throw new Error(\`Artifact \${artifactType} not found\`);
              }
              // Extraction logic would go here
              return artifact;
            }
          };
          EOF

          # Setup npm authentication
          echo "${{ matrix.registry.url }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc

          # Publish to GitHub Packages
          npm publish

          echo "✅ Published to GitHub Packages"

      - name: Publish to Container Registry
        if: matrix.registry.name == 'github-container-registry'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Log in to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Create a simple Dockerfile for the artifacts
          cat > Dockerfile << EOF
          FROM alpine:latest

          # Install basic tools
          RUN apk add --no-cache curl tar gzip

          # Create app directory
          WORKDIR /app

          # Copy artifacts
          COPY unifiedhq-${VERSION}-production.tar.gz /app/
          COPY unifiedhq-${VERSION}-source.tar.gz /app/

          # Create extraction script
          RUN cat > extract.sh << 'SCRIPT'
          #!/bin/sh
          echo "UnifiedHQ v${VERSION} Artifacts"
          echo "Available artifacts:"
          ls -la /app/*.tar.gz
          echo ""
          echo "To extract production artifacts:"
          echo "tar -xzf /app/unifiedhq-${VERSION}-production.tar.gz"
          echo ""
          echo "To extract source code:"
          echo "tar -xzf /app/unifiedhq-${VERSION}-source.tar.gz"
          SCRIPT

          RUN chmod +x extract.sh

          CMD ["./extract.sh"]
          EOF

          # Build and push container image
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/unifiedhq-artifacts"
          docker build -t "\${IMAGE_NAME}:${VERSION}" -t "\${IMAGE_NAME}:latest" .
          docker push "\${IMAGE_NAME}:${VERSION}"
          docker push "\${IMAGE_NAME}:latest"

          echo "✅ Published to GitHub Container Registry"

  # Job 2: Create Artifact Index
  create-artifact-index:
    runs-on: ubuntu-latest
    needs: publish-to-registries
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create comprehensive artifact index
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Create artifact registry index
          cat > artifact-registry.json << EOF
          {
            "version": "${VERSION}",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "registries": {
              "github_releases": {
                "url": "https://github.com/${{ github.repository }}/releases/tag/v${VERSION}",
                "artifacts": [
                  {
                    "name": "unifiedhq-${VERSION}-production.tar.gz",
                    "type": "production-bundle",
                    "description": "Complete production deployment bundle",
                    "download_url": "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/unifiedhq-${VERSION}-production.tar.gz"
                  },
                  {
                    "name": "unifiedhq-${VERSION}-source.tar.gz",
                    "type": "source-code",
                    "description": "Complete source code archive",
                    "download_url": "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/unifiedhq-${VERSION}-source.tar.gz"
                  }
                ]
              },
              "github_packages": {
                "url": "https://github.com/${{ github.repository_owner }}/packages",
                "package_name": "@${{ github.repository_owner }}/unifiedhq",
                "version": "${VERSION}",
                "install_command": "npm install @${{ github.repository_owner }}/unifiedhq@${VERSION}"
              },
              "container_registry": {
                "url": "https://ghcr.io/${{ github.repository_owner }}/unifiedhq-artifacts",
                "image_tags": ["${VERSION}", "latest"],
                "pull_command": "docker pull ghcr.io/${{ github.repository_owner }}/unifiedhq-artifacts:${VERSION}"
              }
            },
            "deployment_options": {
              "vercel": {
                "supported": true,
                "instructions": "Use production bundle with Vercel CLI"
              },
              "docker": {
                "supported": true,
                "instructions": "Use container registry image or build from source"
              },
              "kubernetes": {
                "supported": true,
                "instructions": "Deploy using container image with provided manifests"
              },
              "standalone": {
                "supported": true,
                "instructions": "Extract production bundle and run with Bun/Node.js"
              }
            },
            "verification": {
              "checksums_available": true,
              "gpg_signatures": false,
              "security_scan": true
            }
          }
          EOF

      - name: Update artifact registry
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ steps.version.outputs.version }}';

            // Read the artifact registry
            const registry = JSON.parse(fs.readFileSync('artifact-registry.json', 'utf8'));

            // Create or update the registry file in the repository
            try {
              // Try to get existing registry
              let existingRegistry = {};
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'artifact-registry.json'
                });
                existingRegistry = JSON.parse(Buffer.from(data.content, 'base64').toString());
              } catch (error) {
                console.log('No existing registry found, creating new one');
              }
              
              // Add this version to the registry
              if (!existingRegistry.versions) {
                existingRegistry.versions = {};
              }
              existingRegistry.versions[version] = registry;
              existingRegistry.latest = version;
              existingRegistry.updated = new Date().toISOString();
              
              // Update the file
              const content = Buffer.from(JSON.stringify(existingRegistry, null, 2)).toString('base64');
              
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'artifact-registry.json',
                message: `Update artifact registry for v${version}`,
                content: content,
                sha: existingRegistry.sha || undefined
              });
              
              console.log('✅ Artifact registry updated');
            } catch (error) {
              console.log('⚠️ Could not update artifact registry:', error.message);
            }

  # Job 3: Validate Published Artifacts
  validate-artifacts:
    runs-on: ubuntu-latest
    needs: [publish-to-registries, create-artifact-index]
    permissions:
      contents: read
    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate GitHub Packages
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "🔍 Validating GitHub Packages publication..."

          # Check if package is available
          PACKAGE_URL="https://npm.pkg.github.com/@${{ github.repository_owner }}/unifiedhq"

          # Wait a bit for package to be available
          sleep 30

          # Try to get package info
          if curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PACKAGE_URL" > /dev/null 2>&1; then
            echo "✅ Package available in GitHub Packages"
          else
            echo "⚠️ Package not yet available in GitHub Packages (may take time to propagate)"
          fi

      - name: Validate Container Registry
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "🔍 Validating Container Registry publication..."

          # Log in to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Try to pull the image
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/unifiedhq-artifacts:${VERSION}"

          if docker pull "$IMAGE_NAME" > /dev/null 2>&1; then
            echo "✅ Container image available in GitHub Container Registry"
            
            # Test the image
            docker run --rm "$IMAGE_NAME" > /dev/null 2>&1
            echo "✅ Container image runs successfully"
          else
            echo "❌ Container image not available in GitHub Container Registry"
            exit 1
          fi

      - name: Validate GitHub Releases
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "🔍 Validating GitHub Releases artifacts..."

          # Check if release artifacts are available
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/v${VERSION}"

          if curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$RELEASE_URL" > /dev/null 2>&1; then
            echo "✅ Release artifacts available in GitHub Releases"
            
            # Check specific artifacts
            PRODUCTION_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/unifiedhq-${VERSION}-production.tar.gz"
            SOURCE_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/unifiedhq-${VERSION}-source.tar.gz"
            
            if curl -f -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PRODUCTION_URL" > /dev/null 2>&1; then
              echo "✅ Production bundle available"
            else
              echo "❌ Production bundle not available"
            fi
            
            if curl -f -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$SOURCE_URL" > /dev/null 2>&1; then
              echo "✅ Source code archive available"
            else
              echo "❌ Source code archive not available"
            fi
          else
            echo "❌ Release not found"
            exit 1
          fi

      - name: Create validation report
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "## 📋 Artifact Publication Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Registry Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ GitHub Packages (may take time to propagate)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Production Bundle (\`unifiedhq-${VERSION}-production.tar.gz\`)" >> $GITHUB_STEP_SUMMARY
          echo "- Source Code Archive (\`unifiedhq-${VERSION}-source.tar.gz\`)" >> $GITHUB_STEP_SUMMARY
          echo "- Container Image (\`ghcr.io/${{ github.repository_owner }}/unifiedhq-artifacts:${VERSION}\`)" >> $GITHUB_STEP_SUMMARY
          echo "- NPM Package (\`@${{ github.repository_owner }}/unifiedhq@${VERSION}\`)" >> $GITHUB_STEP_SUMMARY

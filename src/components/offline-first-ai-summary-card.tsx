'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { useNetworkStatusContext } from '@/contexts/network-status-context';
import { cn } from '@/lib/utils';
import {
  IconSparkles,
  IconRefresh,
  IconClock,
  IconCircleCheck,
  IconAlertCircle,
  IconCalendar,
  IconDownload,
  IconWifiOff,
  IconDatabase,
  IconCloudOff,
} from '@tabler/icons-react';

interface AISummary {
  id: string;
  title: string;
  keyHighlights: string[];
  actionItems: string[];
  insights: string[];
  generatedAt: string;
  timeRange: {
    start: string;
    end: string;
  };
  metadata: {
    activityCount: number;
    sourceBreakdown: Record<string, number>;
    model: string;
    tokensUsed: number;
  };
}

interface CachedSummaryData {
  summaries: AISummary[];
  timestamp: number;
  source: 'network' | 'cache';
  timeRange: '24h' | '7d' | '30d';
}

interface OfflineFirstAISummaryCardProps {
  className?: string;
  onSummaryGenerated?: (summary: AISummary) => void;
  onError?: (error: string) => void;
}

export function OfflineFirstAISummaryCard({
  className,
  onSummaryGenerated,
  onError,
}: OfflineFirstAISummaryCardProps) {
  const { toast } = useToast();
  const networkStatus = useNetworkStatusContext();
  const [cachedData, setCachedData] = useState<CachedSummaryData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d'>('24h');
  const [error, setError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);

  useEffect(() => {
    loadSummary();
  }, [timeRange, networkStatus.isOnline]);

  const loadSummary = async (isRetry = false) => {
    try {
      setIsLoading(true);
      setError(null);

      // Try to load from cache first
      const cacheKey = `unifiedhq-ai-summary-${timeRange}`;
      const cachedResponse = await caches
        .open('unifiedhq-api-v1')
        .then(cache =>
          cache.match(
            `/api/ai-summary?timeRange=${timeRange}&cache=${cacheKey}`
          )
        );

      if (cachedResponse) {
        const cachedJson = await cachedResponse.json();
        const cacheTimestamp = parseInt(
          cachedResponse.headers.get('sw-cached-at') || '0'
        );

        setCachedData({
          summaries: cachedJson.summaries || [],
          timestamp: cacheTimestamp,
          source: 'cache',
          timeRange,
        });

        console.log('📦 Loaded AI summary from cache');
      }

      // If online, try to fetch fresh data
      if (networkStatus.isOnline) {
        try {
          const response = await fetch(
            `/api/ai-summary?timeRange=${timeRange}&limit=1`,
            {
              headers: {
                'Cache-Control': 'no-cache',
              },
            }
          );

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(
              errorData.error ||
                `HTTP ${response.status}: Failed to fetch summary`
            );
          }

          const data = await response.json();
          setCachedData({
            summaries: data.summaries || [],
            timestamp: Date.now(),
            source: 'network',
            timeRange,
          });

          setRetryCount(0);

          // Show toast if summary was auto-generated
          if (data.autoGenerated) {
            toast({
              title: 'Daily AI Summary Generated',
              description:
                'Your 24-hour summary has been automatically created!',
            });
          }

          // Call callback if provided
          if (
            onSummaryGenerated &&
            data.summaries &&
            data.summaries.length > 0
          ) {
            onSummaryGenerated(data.summaries[0]);
          }

          console.log('🌐 Loaded fresh AI summary from network');
        } catch (networkError) {
          console.log(
            '🔌 Network request failed for AI summary, using cached data'
          );
          if (!cachedData && !isRetry) {
            throw networkError;
          }
        }
      }
    } catch (error) {
      console.error('Error loading AI summary:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Failed to load AI summary';

      if (!cachedData) {
        setError(errorMessage);

        // Call error callback if provided
        if (onError) {
          onError(errorMessage);
        }

        // Show toast only if not a retry and no cached data
        if (!isRetry) {
          toast({
            title: 'Error',
            description: networkStatus.isOffline
              ? 'No cached summary available. Connect to internet to load summaries.'
              : errorMessage,
            variant: 'destructive',
          });
        }
      }
    } finally {
      setIsLoading(false);
    }
  };

  const retryFetch = () => {
    setRetryCount(prev => prev + 1);
    loadSummary(true);
  };

  const formatTimeRange = (range: string) => {
    switch (range) {
      case '24h':
        return 'Today';
      case '7d':
        return 'This Week';
      case '30d':
        return 'This Month';
      default:
        return 'Today';
    }
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
    });
  };

  const formatCacheTimestamp = (timestamp: number) => {
    const now = Date.now();
    const diffInMinutes = Math.floor((now - timestamp) / (1000 * 60));

    if (diffInMinutes < 1) {
      return 'Just cached';
    } else if (diffInMinutes < 60) {
      return `Cached ${diffInMinutes}m ago`;
    } else {
      const diffInHours = Math.floor(diffInMinutes / 60);
      return `Cached ${diffInHours}h ago`;
    }
  };

  const downloadSummary = () => {
    const summary = cachedData?.summaries?.[0];
    if (!summary) return;

    const summaryText = `
Daily Summary - ${summary.title}
Generated: ${new Date(summary.generatedAt).toLocaleString()}

Key Highlights:
${summary.keyHighlights.map((h, i) => `${i + 1}. ${h}`).join('\n')}

Action Items:
${summary.actionItems.map((a, i) => `${i + 1}. ${a}`).join('\n')}

${summary.insights && summary.insights.length > 0 ? `Additional Insights:\n${summary.insights.map((i, idx) => `${idx + 1}. ${i}`).join('\n')}` : ''}

Generated by AI Summary Tool
    `.trim();

    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-summary-${new Date(summary.generatedAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: 'Download Started',
      description: 'Summary has been downloaded',
    });
  };

  const summary = cachedData?.summaries?.[0] || null;
  const isFromCache = cachedData?.source === 'cache';
  const cacheAge = cachedData?.timestamp
    ? Date.now() - cachedData.timestamp
    : 0;
  const isStale = cacheAge > 60 * 60 * 1000; // 1 hour

  // Error state
  if (error && !isLoading && !cachedData) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                Daily Summary
              </h3>
            </div>
            <div className='flex items-center gap-2'>
              <select
                value={timeRange}
                onChange={e =>
                  setTimeRange(e.target.value as '24h' | '7d' | '30d')
                }
                className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
                disabled={networkStatus.isOffline}
              >
                <option value='24h'>Today</option>
                <option value='7d'>This Week</option>
                <option value='30d'>This Month</option>
              </select>
            </div>
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent>
          {networkStatus.isOffline ? (
            <div className='text-center py-8'>
              <IconCloudOff className='size-12 text-gray-500 mx-auto mb-4' />
              <h4 className='text-lg font-medium text-white mb-2'>
                Offline Mode
              </h4>
              <p className='text-gray-400 mb-4 max-w-sm mx-auto'>
                No cached summary available. Connect to internet to load AI
                summaries.
              </p>
            </div>
          ) : (
            <div className='text-center py-8'>
              <IconAlertCircle className='size-12 text-red-500 mx-auto mb-4' />
              <h4 className='text-lg font-medium text-white mb-2'>
                Failed to Load Summary
              </h4>
              <p className='text-gray-400 mb-4 max-w-sm mx-auto'>{error}</p>
              <div className='flex gap-2 justify-center'>
                <Button
                  onClick={retryFetch}
                  disabled={isLoading}
                  variant='outline'
                  className='border-red-500 text-red-500 hover:bg-red-500 hover:text-white'
                >
                  <IconRefresh className='size-4 mr-2' />
                  Retry ({retryCount}/3)
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    );
  }

  if (isLoading && !cachedData) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                Daily Summary
              </h3>
            </div>
            <Skeleton className='h-6 w-16' />
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent className='space-y-6'>
          <div>
            <Skeleton className='h-5 w-28 mb-3' />
            <div className='space-y-3'>
              {[1, 2, 3, 4].map(i => (
                <div key={i} className='flex items-start gap-3'>
                  <Skeleton className='w-2 h-2 rounded-full mt-2 flex-shrink-0' />
                  <Skeleton className='h-4 flex-1' />
                </div>
              ))}
            </div>
          </div>
          <div>
            <Skeleton className='h-5 w-24 mb-3' />
            <div className='space-y-3'>
              {[1, 2, 3].map(i => (
                <div key={i} className='flex items-start gap-3'>
                  <Skeleton className='w-2 h-2 rounded-full mt-2 flex-shrink-0' />
                  <Skeleton className='h-4 flex-1' />
                </div>
              ))}
            </div>
          </div>
          <div className='pt-4 border-t border-slate-700'>
            <div className='flex items-center justify-between'>
              <Skeleton className='h-3 w-32' />
              <div className='flex gap-2'>
                <Skeleton className='h-5 w-16' />
                <Skeleton className='h-5 w-12' />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!summary) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                Daily Summary
              </h3>
              {networkStatus.isOffline && (
                <Badge variant='destructive' className='text-xs'>
                  <IconWifiOff className='size-3 mr-1' />
                  Offline
                </Badge>
              )}
            </div>
            <div className='flex items-center gap-2'>
              <select
                value={timeRange}
                onChange={e =>
                  setTimeRange(e.target.value as '24h' | '7d' | '30d')
                }
                className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
                disabled={networkStatus.isOffline}
              >
                <option value='24h'>Today</option>
                <option value='7d'>This Week</option>
                <option value='30d'>This Month</option>
              </select>
            </div>
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent>
          <div className='text-center py-8'>
            <IconSparkles className='size-12 text-gray-500 mx-auto mb-4' />
            <h4 className='text-lg font-medium text-white mb-2'>
              No Summary Available
            </h4>
            <p className='text-gray-400 mb-4'>
              {networkStatus.isOffline
                ? 'No cached summary available for this time range.'
                : `No activities found for ${formatTimeRange(timeRange).toLowerCase()}. Connect your integrations to start generating AI summaries.`}
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader className='pb-3'>
        <div className='flex items-center justify-between'>
          <div className='flex items-center gap-2'>
            <IconSparkles className='size-5 text-white' />
            <h3 className='text-lg font-semibold text-white'>Daily Summary</h3>
            {isFromCache && (
              <Badge
                variant={isStale ? 'destructive' : 'secondary'}
                className='text-xs'
              >
                <IconDatabase className='size-3 mr-1' />
                Cached
              </Badge>
            )}
            {networkStatus.isOffline && (
              <Badge variant='outline' className='text-xs'>
                <IconWifiOff className='size-3 mr-1' />
                Offline
              </Badge>
            )}
          </div>
          <div className='flex items-center gap-2'>
            <select
              value={timeRange}
              onChange={e =>
                setTimeRange(e.target.value as '24h' | '7d' | '30d')
              }
              className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
              disabled={networkStatus.isOffline}
            >
              <option value='24h'>Today</option>
              <option value='7d'>This Week</option>
              <option value='30d'>This Month</option>
            </select>
            <div className='flex items-center gap-1'>
              <Button
                size='sm'
                variant='ghost'
                onClick={downloadSummary}
                className='text-gray-400 hover:text-white hover:bg-slate-800'
                title='Download summary'
              >
                <IconDownload className='size-4' />
              </Button>
            </div>
          </div>
        </div>
        <p className='text-sm text-gray-400 flex items-center gap-2'>
          Intelligent insights from your team's activity
          {isFromCache && cachedData?.timestamp && (
            <span
              className={cn(
                'text-xs',
                isStale ? 'text-orange-400' : 'text-gray-500'
              )}
            >
              • {formatCacheTimestamp(cachedData.timestamp)}
            </span>
          )}
        </p>
      </CardHeader>

      <CardContent className='space-y-6'>
        {/* Offline notice */}
        {networkStatus.isOffline && (
          <div className='p-3 bg-orange-900/20 border border-orange-500/20 rounded-lg'>
            <div className='flex items-center gap-2 text-orange-300'>
              <IconWifiOff className='size-4' />
              <span className='text-sm font-medium'>
                Offline mode - showing cached summary
              </span>
            </div>
            {isStale && (
              <p className='text-xs text-orange-400 mt-1'>
                Summary may be outdated. Connect to internet to refresh.
              </p>
            )}
          </div>
        )}

        {/* Key Highlights */}
        <div>
          <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
            <IconCircleCheck className='size-4 text-blue-400' />
            Key Highlights
          </h4>
          <ul className='space-y-2'>
            {summary.keyHighlights.map((highlight, index) => (
              <li key={index} className='flex items-start gap-3'>
                <div className='w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0' />
                <span className='text-gray-300 text-sm leading-relaxed'>
                  {highlight}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Action Items */}
        <div>
          <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
            <IconAlertCircle className='size-4 text-orange-400' />
            Action Items
          </h4>
          <ul className='space-y-2'>
            {summary.actionItems.map((item, index) => (
              <li key={index} className='flex items-start gap-3'>
                <div className='w-2 h-2 bg-orange-400 rounded-full mt-2 flex-shrink-0' />
                <span className='text-gray-300 text-sm leading-relaxed'>
                  {item}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Additional Insights */}
        {summary.insights && summary.insights.length > 0 && (
          <div>
            <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
              <IconCalendar className='size-4 text-green-400' />
              Additional Insights
            </h4>
            <ul className='space-y-2'>
              {summary.insights.map((insight, index) => (
                <li key={index} className='flex items-start gap-3'>
                  <div className='w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0' />
                  <span className='text-gray-300 text-sm leading-relaxed'>
                    {insight}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Footer */}
        <div className='pt-4 border-t border-slate-700'>
          <div className='flex items-center justify-between text-xs text-gray-500'>
            <div className='flex items-center gap-1'>
              <IconClock className='size-3' />
              Summary generated at {formatTimestamp(summary.generatedAt)}
            </div>
            <div className='flex items-center gap-2'>
              <Badge variant='secondary' className='text-xs'>
                {summary.metadata.activityCount} activities
              </Badge>
              {isFromCache && (
                <Badge variant='outline' className='text-xs'>
                  <IconDatabase className='size-3 mr-1' />
                  Cached
                </Badge>
              )}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

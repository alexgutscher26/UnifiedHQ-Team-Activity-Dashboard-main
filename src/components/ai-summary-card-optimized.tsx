'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import {
  IconSparkles,
  IconRefresh,
  IconClock,
  IconCircleCheck,
  IconAlertCircle,
  IconCalendar,
  IconDownload,
} from '@tabler/icons-react';

interface AISummary {
  id: string;
  title: string;
  keyHighlights: string[];
  actionItems: string[];
  insights: string[];
  generatedAt: string;
  timeRange: {
    start: string;
    end: string;
  };
  metadata: {
    activityCount: number;
    sourceBreakdown: Record<string, number>;
    model: string;
    tokensUsed: number;
  };
}

interface AISummaryCardProps {
  className?: string;
  onSummaryGenerated?: (summary: AISummary) => void;
  onError?: (error: string) => void;
}

/**
 * Optimized AI Summary Card Component with performance enhancements.
 *
 * This component manages the state for generating and displaying AI-generated summaries, including handling loading states, errors, and user interactions. It utilizes useCallback to optimize event handlers and memoizes functions to prevent unnecessary re-renders. The component fetches summaries based on a selected time range and allows users to download the generated summary. It also provides retry functionality in case of errors during fetching.
 *
 * @param className - Optional additional class names for styling the component.
 * @param onSummaryGenerated - Callback function invoked when a summary is successfully generated.
 * @param onError - Callback function invoked when an error occurs during summary generation or fetching.
 * @returns JSX.Element representing the AI Summary Card.
 */
export function AISummaryCardOptimized({
  className,
  onSummaryGenerated,
  onError,
}: AISummaryCardProps) {
  const { toast } = useToast();
  const [summary, setSummary] = useState<AISummary | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d'>('24h');
  const [error, setError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);

  // Optimized event handlers using useCallback
  const handleTimeRangeChange = useCallback(
    (e: React.ChangeEvent<HTMLSelectElement>) => {
      setTimeRange(e.target.value as '24h' | '7d' | '30d');
    },
    []
  );

  const retryFetch = useCallback(() => {
    setRetryCount(prev => prev + 1);
    fetchSummary(true);
  }, []);

  const downloadSummary = useCallback(() => {
    if (!summary) return;

    const summaryText = `
Daily Summary - ${summary.title}
Generated: ${new Date(summary.generatedAt).toLocaleString()}

Key Highlights:
${summary.keyHighlights.map((h, i) => `${i + 1}. ${h}`).join('\n')}

Action Items:
${summary.actionItems.map((a, i) => `${i + 1}. ${a}`).join('\n')}

${summary.insights && summary.insights.length > 0 ? `Additional Insights:\n${summary.insights.map((i, idx) => `${idx + 1}. ${i}`).join('\n')}` : ''}

Generated by AI Summary Tool
    `.trim();

    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-summary-${new Date(summary.generatedAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: 'Download Started',
      description: 'Summary has been downloaded',
    });
  }, [summary, toast]);

  const generateSummary = useCallback(async () => {
    try {
      setIsGenerating(true);
      setError(null);

      const response = await fetch('/api/ai-summary/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || 'Failed to generate summary');
      }

      const data = await response.json();

      if (data.summary) {
        setSummary(data.summary);
        setError(null);

        toast({
          title: 'Summary Generated',
          description: `Generated summary with ${data.activityCount} activities`,
        });

        onSummaryGenerated?.(data.summary);
      } else {
        throw new Error('No summary returned from server');
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : 'Failed to generate summary';
      setError(errorMessage);
      onError?.(errorMessage);

      toast({
        title: 'Generation Failed',
        description: errorMessage,
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  }, [toast, onSummaryGenerated, onError]);

  /**
   * Fetch the AI summary from the server and update the state accordingly.
   *
   * This function initiates a fetch request to retrieve the AI summary based on the specified time range and limit.
   * It handles errors by setting appropriate error messages and retry logic. If the summary is successfully fetched,
   * it updates the summary state and triggers any provided callbacks. Additionally, it manages loading states and
   * displays notifications based on the success or failure of the fetch operation.
   *
   * @param isRetry - A boolean indicating whether this is a retry attempt for the fetch operation.
   */
  const fetchSummary = async (isRetry = false) => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(
        `/api/ai-summary?timeRange=${timeRange}&limit=1`,
        {
          headers: {
            'Cache-Control': 'no-cache',
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.error || `HTTP ${response.status}: Failed to fetch summary`
        );
      }

      const data = await response.json();
      if (data.summaries && data.summaries.length > 0) {
        setSummary(data.summaries[0]);
        setRetryCount(0);

        if (data.autoGenerated) {
          toast({
            title: 'Daily AI Summary Generated',
            description: 'Your 24-hour summary has been automatically created!',
          });
        }

        if (onSummaryGenerated) {
          onSummaryGenerated(data.summaries[0]);
        }
      } else {
        setSummary(null);
      }
    } catch (error) {
      console.error('Error fetching AI summary:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Failed to load AI summary';
      setError(errorMessage);

      if (onError) {
        onError(errorMessage);
      }

      if (!isRetry) {
        toast({
          title: 'Error',
          description: errorMessage,
          variant: 'destructive',
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchSummary();
  }, [timeRange]);

  const formatTimeRange = (range: string) => {
    switch (range) {
      case '24h':
        return 'Today';
      case '7d':
        return 'This Week';
      case '30d':
        return 'This Month';
      default:
        return 'Today';
    }
  };

  /**
   * Formats a timestamp into a localized time string.
   */
  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
    });
  };

  // Error state
  if (error && !isLoading) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                Daily Summary
              </h3>
            </div>
            <div className='flex items-center gap-2'>
              <select
                value={timeRange}
                onChange={handleTimeRangeChange}
                className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
              >
                <option value='24h'>Today</option>
                <option value='7d'>This Week</option>
                <option value='30d'>This Month</option>
              </select>
            </div>
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent>
          <div className='text-center py-8'>
            <IconAlertCircle className='size-12 text-red-500 mx-auto mb-4' />
            <h4 className='text-lg font-medium text-white mb-2'>
              Failed to Load Summary
            </h4>
            <p className='text-gray-400 mb-4 max-w-sm mx-auto'>{error}</p>
            <div className='flex gap-2 justify-center'>
              <Button
                onClick={retryFetch}
                disabled={isLoading}
                variant='outline'
                className='border-red-500 text-red-500 hover:bg-red-500 hover:text-white'
              >
                <IconRefresh className='size-4 mr-2' />
                Retry ({retryCount}/3)
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (isLoading) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                Daily Summary
              </h3>
            </div>
            <Skeleton className='h-6 w-16' />
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent className='space-y-6'>
          <div>
            <Skeleton className='h-5 w-28 mb-3' />
            <div className='space-y-3'>
              {[1, 2, 3, 4].map(i => (
                <div key={i} className='flex items-start gap-3'>
                  <Skeleton className='w-2 h-2 rounded-full mt-2 flex-shrink-0' />
                  <Skeleton className='h-4 flex-1' />
                </div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!summary) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                Daily Summary
              </h3>
            </div>
            <div className='flex items-center gap-2'>
              <select
                value={timeRange}
                onChange={handleTimeRangeChange}
                className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
              >
                <option value='24h'>Today</option>
                <option value='7d'>This Week</option>
                <option value='30d'>This Month</option>
              </select>
            </div>
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent>
          <div className='text-center py-8'>
            <IconSparkles className='size-12 text-gray-500 mx-auto mb-4' />
            <h4 className='text-lg font-medium text-white mb-2'>
              No Summary Available
            </h4>
            <p className='text-gray-400 mb-4'>
              No activities found for {formatTimeRange(timeRange).toLowerCase()}
              . Connect your integrations and perform some activities to
              generate AI summaries.
            </p>
            <Button
              onClick={generateSummary}
              disabled={isGenerating}
              className='bg-blue-600 hover:bg-blue-700 text-white'
            >
              {isGenerating ? (
                <>
                  <IconRefresh className='size-4 mr-2 animate-spin' />
                  Generating...
                </>
              ) : (
                <>
                  <IconSparkles className='size-4 mr-2' />
                  Generate Summary
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader className='pb-3'>
        <div className='flex items-center justify-between'>
          <div className='flex items-center gap-2'>
            <IconSparkles className='size-5 text-white' />
            <h3 className='text-lg font-semibold text-white'>Daily Summary</h3>
          </div>
          <div className='flex items-center gap-2'>
            <select
              value={timeRange}
              onChange={handleTimeRangeChange}
              className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
            >
              <option value='24h'>Today</option>
              <option value='7d'>This Week</option>
              <option value='30d'>This Month</option>
            </select>
            <div className='flex items-center gap-1'>
              <Button
                size='sm'
                variant='ghost'
                onClick={generateSummary}
                disabled={isGenerating}
                className='text-gray-400 hover:text-white hover:bg-slate-800'
                title='Generate new summary'
              >
                {isGenerating ? (
                  <IconRefresh className='size-4 animate-spin' />
                ) : (
                  <IconRefresh className='size-4' />
                )}
              </Button>
              <Button
                size='sm'
                variant='ghost'
                onClick={downloadSummary}
                className='text-gray-400 hover:text-white hover:bg-slate-800'
                title='Download summary'
              >
                <IconDownload className='size-4' />
              </Button>
            </div>
          </div>
        </div>
        <p className='text-sm text-gray-400'>
          Intelligent insights from your team's activity
        </p>
      </CardHeader>

      <CardContent className='space-y-6'>
        {/* Key Highlights */}
        <div>
          <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
            <IconCircleCheck className='size-4 text-blue-400' />
            Key Highlights
          </h4>
          <ul className='space-y-2'>
            {summary.keyHighlights.map((highlight, index) => (
              <li key={index} className='flex items-start gap-3'>
                <div className='w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0' />
                <span className='text-gray-300 text-sm leading-relaxed'>
                  {highlight}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Action Items */}
        <div>
          <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
            <IconAlertCircle className='size-4 text-orange-400' />
            Action Items
          </h4>
          <ul className='space-y-2'>
            {summary.actionItems.map((item, index) => (
              <li key={index} className='flex items-start gap-3'>
                <div className='w-2 h-2 bg-orange-400 rounded-full mt-2 flex-shrink-0' />
                <span className='text-gray-300 text-sm leading-relaxed'>
                  {item}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Additional Insights */}
        {summary.insights && summary.insights.length > 0 && (
          <div>
            <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
              <IconCalendar className='size-4 text-green-400' />
              Additional Insights
            </h4>
            <ul className='space-y-2'>
              {summary.insights.map((insight, index) => (
                <li key={index} className='flex items-start gap-3'>
                  <div className='w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0' />
                  <span className='text-gray-300 text-sm leading-relaxed'>
                    {insight}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Footer */}
        <div className='pt-4 border-t border-slate-700'>
          <div className='flex items-center justify-between text-xs text-gray-500'>
            <div className='flex items-center gap-1'>
              <IconClock className='size-3' />
              Summary generated at {formatTimestamp(summary.generatedAt)}
            </div>
            <Badge variant='secondary' className='text-xs'>
              {summary.metadata.activityCount} activities
            </Badge>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
